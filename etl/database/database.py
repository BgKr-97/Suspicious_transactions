from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError
from etl.config.logger_config import setup_logger
import pandas as pd
import numpy as np
import os
import time

logger = setup_logger('config/etl.log')


class DBExtractor:
    def __init__(self, dbname, user, password, host, port):
        try:
            conn_str = f"postgresql+psycopg2://{user}:{password}@{host}:{port}/{dbname}"
            self.engine = create_engine(conn_str)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
            with self.engine.connect() as connection:
                connection.execute(text("SELECT 1"))

            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{dbname}' –Ω–∞ {host}:{port} –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user}'")
            print(f'‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {dbname}!')
        except SQLAlchemyError as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
            raise

    @staticmethod
    def _load_sql(path: str) -> str:
        """–ß–∏—Ç–∞–µ—Ç SQL –∏–∑ —Ñ–∞–π–ª–∞."""
        full_path = os.path.join(os.path.dirname(__file__), path)
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if not content.strip():
                    raise ValueError(f"–§–∞–π–ª {full_path} –ø—É—Å—Ç.")
                return content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {full_path}: {str(e)}")
            raise

    def _fetch_df(self, path: str, info: str) -> pd.DataFrame:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame."""
        sql = self._load_sql(path)
        try:
            start_time = time.perf_counter()

            df = pd.read_sql(sql, self.engine)
            duration = time.perf_counter() - start_time

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {info} —Ç–∞–±–ª–∏—Ü —Å—Ö–µ–º—ã 'core'.")
            print(f"‚öôÔ∏è –ò–∑–≤–ª–µ–∫–∞—é –∑–∞–ø–∏—Å–∏ –∏–∑ {info} —Ç–∞–±–ª–∏—Ü —Å—Ö–µ–º—ã 'core' ...")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {info} —Ç–∞–±–ª–∏—Ü —Å—Ö–µ–º—ã 'core' –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥.")

            return df
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
            raise

    def fetch_merged_transactions(self) -> pd.DataFrame:
        return self._fetch_df('sql/fetch_merged_transactions.sql', 'base_info')

    def fetch_merged_info(self) -> pd.DataFrame:
        return self._fetch_df('sql/fetch_merged_info.sql', 'additional_info')

    def create_datamart(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç DDL-—Å–∫—Ä–∏–ø—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã –≤–∏—Ç—Ä–∏–Ω—ã"""
        sql = self._load_sql('sql/sql_data_mart.sql')
        try:
            with self.engine.begin() as conn:
                conn.execute(text(sql))
            logger.info(f"DDL-—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: 'sql_data_mart.sql'")
            print(f'‚úÖ –¢–∞–±–ª–∏—Ü–∞ –≤–∏—Ç—Ä–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DDL-—Å–∫—Ä–∏–ø—Ç–∞ 'sql_data_mart.sql': %s", str(e))
            raise

    def load_datamart(self, df, schema, table):
        """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏—Ç—Ä–∏–Ω—É"""
        if df.empty:
            logger.info(f"DataFrame –ø—É—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –≤–∏—Ç—Ä–∏–Ω—É –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return
        df['date_time'] = pd.to_datetime(df['date_time'])

        # –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        expected_columns = [
            'transaction_id', 'client_id', 'client_name', 'client_age', 'account_id',
            'date_time', 'amount', 't_type', 'is_receipt',
            'sender_country', 'sender_city', 'sender_region', 'sender_latitude', 'sender_longitude',
            'recipient_country', 'recipient_city', 'recipient_region', 'recipient_latitude', 'recipient_longitude',
            'is_suspicious', 'risk_score', 'reason_flags', 'risk_status'
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if set(df.columns) != set(expected_columns):
            logger.error("–°—Ç–æ–ª–±—Ü—ã –≤ DataFrame –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã –≤–∏—Ç—Ä–∏–Ω—ã")

        df = df[expected_columns]

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏
        chunk_size = 10_000
        chunks = np.array_split(df, max(len(df) // chunk_size, 1))

        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(df)} —Å—Ç—Ä–æ–∫ –≤ {len(chunks)} —á–∞—Å—Ç—è—Ö –ø–æ {chunk_size} —Å—Ç—Ä–æ–∫")
        print(f'‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ {len(df)} —Å—Ç—Ä–æ–∫ –≤ {len(chunks)} —á–∞—Å—Ç—è—Ö –ø–æ {chunk_size} —Å—Ç—Ä–æ–∫:')

        total_time = 0
        for i, chunk in enumerate(chunks, start=1):
            try:
                start_time = time.perf_counter()
                with self.engine.begin() as connection:
                    chunk.to_sql(
                        name=table,
                        con=connection,
                        schema=schema,
                        if_exists='append',
                        index=False,
                        method='multi'
                    )
                duration = time.perf_counter() - start_time
                total_time += duration
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç—å {i}/{len(chunks)} ({len(chunk)} —Å—Ç—Ä–æ–∫)")
                print(f"---- [+] –ó–∞–≥—Ä—É–∂–µ–Ω {i}-—ã–π —Å–µ—Ç –ø–æ {chunk_size} —Å—Ç—Ä–æ–∫ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥.")
            except SQLAlchemyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ {i}/{len(chunks)}: {e}")
                continue

        print(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {total_time / len(chunks)}")